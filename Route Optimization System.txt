#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX 100
#define INF INT_MAX

typedef struct {
    int source;
    int destination;
    int travelTime;
} Route;

Route routes[MAX];
int graph[MAX][MAX];
int numRoutes = 0;

void addRoute(int src, int dest, int time) {
    routes[numRoutes].source = src;
    routes[numRoutes].destination = dest;
    routes[numRoutes].travelTime = time;
    graph[src][dest] = time;
    graph[dest][src] = time; // Assuming undirected graph
    numRoutes++;
}

void initializeGraph() {
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            graph[i][j] = (i == j) ? 0 : INF;
        }
    }
}

void dijkstra(int start, int end) {
    int dist[MAX], visited[MAX];
    for (int i = 0; i < MAX; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }
    
    dist[start] = 0;

    for (int count = 0; count < MAX - 1; count++) {
        int minIndex = -1, minValue = INF;

        for (int v = 0; v < MAX; v++) {
            if (!visited[v] && dist[v] < minValue) {
                minValue = dist[v];
                minIndex = v;
            }
        }

        visited[minIndex] = 1;

        for (int v = 0; v < MAX; v++) {
            if (!visited[v] && graph[minIndex][v] != INF && 
                dist[minIndex] + graph[minIndex][v] < dist[v]) {
                dist[v] = dist[minIndex] + graph[minIndex][v];
            }
        }
    }

    printf("Shortest travel time from %d to %d is %d minutes.\n", start, end, dist[end]);
}

void displayRoutes() {
    printf("Current Routes:\n");
    for (int i = 0; i < numRoutes; i++) {
        printf("Route from %d to %d takes %d minutes.\n", 
               routes[i].source, routes[i].destination, routes[i].travelTime);
    }
}

int main() {
    initializeGraph();
    
    // Example routes
    addRoute(1, 2, 10);
    addRoute(2, 3, 15);
    addRoute(1, 3, 30);
    
    displayRoutes();
    
    // Calculate shortest route
    dijkstra(1, 3);

    return 0;
}
